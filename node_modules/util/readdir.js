var path = require('path');
var platform = require('os').platform();
var misc = require('./misc');
var md5 = misc.md5;
var fsUtil = require('./fs');
var fs = require('fs');
var command = misc.command;
var tagg2 = require('tagg2'); //require the module

var PLATFORM_WIN32 = 'win32';
var PLATFORM_LINUX = 'linux';
// 得到可执行脚本的目录
var shellDir = (function(){
	var dir = path.join(__dirname,'../../shell/');
	var _platform;console.log(platform);
	switch (platform){
		case PLATFORM_WIN32:
			_platform = PLATFORM_WIN32;
			break;
		case PLATFORM_LINUX:
		default :
			_platform = PLATFORM_LINUX;
	}
	return path.join(dir,_platform);
})();

var getReadCommand = (function(){
	if(PLATFORM_WIN32 == platform){
		return function(dirname,time,resultFileName,overFilePath){
			return ['node',path.join(shellDir,'readdir.js'),dirname,time,overFilePath,'>>',resultFileName].join(' ');
		}
	}else{
		return function(dirname,time,resultFileName,overFilePath){
			return ['nohup',path.join(shellDir,'readdir.sh'),dirname,time||'',overFilePath,'>>',resultFileName,'2>&1 &'].join(' ');
		}
	}
})();
var _readdir = function(dirname,time,resultFileName,overFilePath,callback){
	var _command = getReadCommand(dirname,time,resultFileName,overFilePath);
	command(_command,callback);
	// var th_func = function(){
	// 	var _command = thread.buffer.toString();
	// 	require('./misc.js').command(_command);
	// 	thread.end("thread over"); 
	// }
	// var thread = tagg2.create(th_func,{buffer: new Buffer(_command)}, function(err, res){
	// 	if(err) throw(err);//thread occur some errors

	// 	console.log(res);//this will be print "thread over"

 //     	thread.destroy();//make suer to destory the thread which you have created
	// });
}
/*windows下会表现为同步*/
var readdir = function(dirname,time,temppath,callback){
	var md5Val = md5(dirname)+new Date().getTime();
	var resultFileName = path.join(temppath,'dir_'+md5Val);
	var overFilePath = path.join(temppath,'over_'+md5Val);
	_readdir(dirname,time,resultFileName,overFilePath,function(){
		if(callback){
			var failNum = 5;
		    var failedNum = 0;
		    var readTT;
			var offset = 0;
	        var totalNum = 0;
	        var inptext = '';
	        var _delay = 1000;
			var _read = function(){
	            clearTimeout(readTT);
	            var stat = fs.statSync(resultFileName);
	            var fileSize = stat.size;
	            if(offset != fileSize){
	                failedNum = 0;//有数据时失败次数重置
	                var readStream = fs.createReadStream(resultFileName,{start:offset,end:fileSize});
	                readStream.setEncoding('utf8');
	                var dataInfo = [];
	                readStream.on('data', function (data) {
	                    offset += data.length;
	                    inptext += data;
	                    var arr = inptext.split('\n');
	                    inptext = arr.pop();//最后一个出栈
	                    totalNum += arr.length;
	                    setTimeout(function(){
	                        callback(arr);
	                    },0)
	                });
	                readStream.on('end', function (close) {
	                    readTT = setTimeout(_read,_delay);//给充足的时间让系统更新文件时间
	                });
	            }else{
	            	if(fs.existsSync(overFilePath)){
	            		var result = null;
	            		var time = fs.readFileSync(overFilePath);
	            		fsUtil.rmdirSync(overFilePath);
			            fsUtil.rmdirSync(resultFileName);
	            		if(inptext){//处理上次处理完后的最后一个
	                        inptext = inptext.split('\n');
	                        totalNum += inptext.length;
	                        result = [inptext];
	                    }
	                    callback(result,{
	                    	totalNum: totalNum,
	                    	time: time+'ms'
	                    });
	            	}else{
	            		readTT = setTimeout(_read,_delay);
	            	}
	            }
	        }
	        _read();
		}
	});	
}
exports.readdir = readdir;