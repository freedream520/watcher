/*时间格式化*/
Date.prototype.format = function(format){
	format || (format = 'yyyy-MM-dd hh:mm:ss');
	var o = {
		"M+" : this.getMonth()+1, //month
		"d+" : this.getDate(),    //day
		"h+" : this.getHours(),   //hour
		"m+" : this.getMinutes(), //minute
		"s+" : this.getSeconds(), //second
		"q+" : Math.floor((this.getMonth()+3)/3),  //quarter
		"S" : this.getMilliseconds() //millisecond
	}
	if(/(y+)/.test(format)){
		format = format.replace(RegExp.$1,(this.getFullYear()+"").substr(4 - RegExp.$1.length));
	} 
	for(var k in o){
		if(new RegExp("("+ k +")").test(format)){
			format = format.replace(RegExp.$1,RegExp.$1.length==1 ? o[k] :("00"+ o[k]).substr((""+ o[k]).length));
		}
	}
	
	return format;
}

!function(){
	var crypto = require('crypto');

	/*字符中加密*/
	function md5(str){
	    if(str && str.toString){
	        return crypto.createHash('sha1').update(str.toString()).digest('hex');
	    }
	    return '';
	}
	exports.md5 = md5;
}();

exports.trim = function(str){
	if(typeof str !== 'string'){
		return str;
	}
	return str.replace(/^\s+|\s+$/,'');
}

/*继承*/
exports.extend = function(a,b,c,d){
	var args = [].slice.call(arguments,1);
	args.forEach(function(obj){
		for(var i in obj){
			a[i] = obj[i];
		}
	});
	
	return a;
}
/*isArray*/
;(function(){
	['Array'].forEach(function(item){
		exports['is'+item] = function(obj){
			return Object.prototype.toString.call(obj) == '[object '+item+']';
		}
	});
})();

/*直接运行外部命令*/
;(function(){
	var exec = require('child_process').exec;
	//这里要捕捉到命令的错误输出，一定不可以把错误重定向
	exports.command = function(command,callback,timeout){
		callback || (callback = function(){});
		// add timeout option
		var runCommand = exec(command,{timeout: +timeout || 0},function(error, stdout, stderr){
			if(error || stderr){
				callback(error||stderr);
			}else{
				callback(null,stdout && stdout.replace(/^\s*|\s*$/g,''));
			}
		});
		// var runCommand = exec(command);
		// var result = '';
		// var errMsg = '';
		// runCommand.stdout.on('data', function (data) {
		// 	result += data.toString();
		// 	// console.log('输出：'+data);
		// });
		// // 捕获标准错误输出并将其打印到控制台
		// runCommand.stderr.on('data', function (data) {
		// 	errMsg += data;
		// 	// console.log('错误输出：'+data);
		// });
		// runCommand.on('exit', function (code) {
		// 	callback(errMsg,result);
		// });
	}
	exports.command.su = function(user,command,callback,timeout){
		command = ['su - '+user+' << EOF',command,'EOF'].join('\n');
		exports.command(command,callback,timeout);
	}
})();

// exports.sysError = function(logPath){
// 	var errorLog = exports.prefixLogSync(logPath,'err');
// 	process.on('uncaughtException',function(e){
// 		errorLog('sysErr',e);
// 	});
// }
;(function(){
	var http = require('http');
	exports.curl = function (host,port,path,callback,timeout){
		callback || (callback = function(){});
		//通过http得到内存中目录结构及要删除的信息
		var req = http.get({
			hostname: host,
			port: port,
			path: path||'/'
		},function(res){
			res.setEncoding('utf8');
			var data = '';
			res.on('data',function(d){
				data += d.toString();
			}).on('end',function(){
				callback(null,data);
			});
		});
		req.on('error', function(e) {
			callback(e);
		});
		if(timeout > 0){
			req.setTimeout(timeout,function(){
				req.abort();
				callback(new Error('timeout'));
			});
		}
	}
})();
/*得到本机IP*/
exports.getIp = function(){
	var ips = [];
	var os = require('os'); 
	var networks = os.networkInterfaces();
	for(var i in networks){
		networks[i].forEach(function(item){
			if(item.family == 'IPv4' && '127.0.0.1' != item.address){  
		        ips.push(item.address);  
		    }  
		});
	}
	return ips;
}
/*
主要用在排序上
得到目录的深度，如：
/a/b/ 	=> 	3
/a/b 	=> 	2
*/
exports.getPathDepth = function(_path){
	if(!_path){
		return 0;
	}
	_path = path.normalize(_path);
	if(_path.lastIndexOf(_path.length-1) != path.sep){
		_path += path.sep;
	}
	return _path.split(path.sep).length;
}