var fs = require('fs');
var path = require('path');

var misc = require('./misc');
var fsUtil = require('./fs');
/*日志处理*/
;(function(){
	//日志格式：
	//"2013-05-21 09:30:21"	"add to memory" "/path/a/b.txt" 
	var addTime = function(args){
		args = [].slice.call(args);
		args.unshift(new Date().format());
		return args;
	}
	var print = function(sep){
		if(sep){
			return function(){
				return console.log.call(console,addTime(arguments).join(sep));
			}
		}else{
			return function(){
				console.log.apply(console,addTime(arguments));
			}
		}
	}
	;(function(){
		var delay = 10;
		var logData = {};
		var fnCache = {};
		var _cacheTime = new Date();
		var getDate = function(msgDate){
			return msgDate.format('yyyy-MM-dd');
		}
		/*同步输出*/
		var logSync = function(logPath,getLogFileName){
			getLogFileName || (getLogFileName = function(msgDate){
				return path.join(logPath,getDate(msgDate)+'.log');
			});
			logPath = path.normalize(path.join(logPath,'.'));
			var cacheName = getLogFileName(_cacheTime);//根据logPath和getLogFileName来确定缓存名称
			if(fnCache[cacheName]){
				return fnCache[cacheName];
			}
			fsUtil.mkdirSync(logPath);
			logData[cacheName] || (logData[cacheName] = []);
			var deal = function(){
				var tempData = logData[cacheName];
				logData[cacheName] = [];
				var tempObj = {};
				tempData.forEach(function(info){
					var t = getLogFileName(info[0]);
					tempObj[t] || (tempObj[t] = []);
					tempObj[t].push(info[1]);
				});
				for(var _path in tempObj){
					tempObj[_path].push('');
					fs.appendFileSync(_path,tempObj[_path].join('\n'));
				}
				if(tempData.length){
					dealTime = setTimeout(deal,delay);
				}else{
					clearTimeout(dealTime);
					dealTime = false;
				}
			}
			function startDeal(){
				dealTime = setTimeout(deal,delay);
			}
			var dealTime;
			return (fnCache[cacheName] = function(){
				var args = addTime(arguments);
				var obj = [new Date(),args.join('\t')];
				logData[cacheName].push(obj);
				// config.isDebug && exports.print.apply(null,arguments);
				if(!dealTime){//当没有处理队列时，启动处理
					startDeal();
				}
			})
		}
		//同步输出到错误日志文件
		var errorSync = function(logPath,prefix){
			//这里可以保证不和logSync的缓存键值相同
			return logSync(logPath,function(msgDate){
				return path.join(logPath,(prefix||'err_')+getDate(msgDate)+'.log');
			});
		}
		var prefixLogSync = function(logPath,prefix){
			//这里可以保证不和logSync的缓存键值相同
			return logSync(logPath,function(msgDate){
				return path.join(logPath,prefix+'_'+getDate(msgDate)+'.log');
			});
		}

		exports.logSync = logSync;
		exports.errorSync = errorSync;
		exports.prefixLogSync = prefixLogSync;
	})();

	exports.print = print();
	exports.log = print('\t');
})();
exports.sysError = function(logPath){
	var errorLog = exports.prefixLogSync(logPath,'err');
	process.on('uncaughtException',function(e){
		errorLog('sysErr',e.stack);
	});
}