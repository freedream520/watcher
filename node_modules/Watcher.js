var util = require('util'),
	EventEmitter = require("events").EventEmitter,
	fs = require('fs'),
	path = require('path');

var watcherUtil = require('./utils');
var platform = watcherUtil.platform,
	inotify = require('inotify/'+platform.platform+'/index').inotify,
	INOTIFY_CONST = require('inotify/CONST'),
	misc = watcherUtil.misc,
	logger = watcherUtil.logger,
	readdir = watcherUtil.readdir;

var config,_log,_error,_init,createDelay,_logPath;
var Watcher = function(options){
	this.watchPathList = {};//监控队列
	this.parentPathList = [];//计算出的父级目录
	this.options = options || {};
	Watcher._init();//初始化参数
}
util.inherits(Watcher,EventEmitter);
/*初始化参数*/
Watcher._init = function(){
    var config = require('../config');
    var newWatcher = config.watcher.slice();
    createDelay = config.create_delay;
    _logPath = config.logPath;
    _log = logger.prefixLogSync(_logPath,'watcher');
    _error = logger.errorSync(_logPath);
    _init = logger.errorSync(_logPath,'init');
}

/*提供统一的遍历目录并初始化接口*/
Watcher.prototype._readDir = function (dir,isInit,callback) {
	try{
        if(!fs.statSync(dir).isDirectory()){
            return;
        }
    }catch(e){
        return;
    }
    var _this = this;
    var filter = _this.options.filter;
    callback || (callback = function(_pathArr,overInfo){
    	if(_pathArr){
	    	_pathArr.forEach(function(_path){
	    		var tempArr = _path.split('|');
	    		var isFile = tempArr.length == 2;

	    		_path = path.normalize(tempArr[0]);
                // 外层过滤
		        if(filter){
			    	if(!filter(_path)){
			    		_log('filter',_path);
			    		return false;
			    	}
			    }
		        if(isFile){
		            _this._emit(INOTIFY_CONST.EVENT_CHANGE,{
		            	fullname: _path,
		            	filename: path.basename(_path),
		            	isDir: false
		            });
		        }else{
		            if(isInit){
		                _this._addWatch(_path,true,true);
		            }else{
		                _this._addWatch(_path);
		            }                    
		        }
	    	});
    	}else{
    		_init(JSON.stringify(overInfo));
    	}    	
    });
    var startSecond = parseInt((+new Date() - createDelay)/1000);//得到启动时间点前一段时间的时间点的秒数
    _init(dir,startSecond);
    readdir(dir,startSecond,_logPath,callback);
}
/*统一过滤，return true时正常处理，return false时舍弃*/
Watcher.prototype._filter = function(_path){
    var filter = this.options.filter;
    if(filter){
        var flag = filter(_path);
        if(!flag){
            _log('filter',_path);
            return false;
        }
    }
    return true;
}
/*给指定目录添加监控，会自动递归监控子目录*/
Watcher.prototype._addWatch = function(watchPath, isNoReadSub /*是否不用遍历子目录，默认为false,即遍历*/,isParent){
	var _this = this;
    watchPath = path.normalize(path.join(watchPath,'.'));
    // 外层过滤 
    if(!_this._filter(watchPath)){
        return false;
    }
    // isNoReadSub == false是监控后有文件（夹）更新时传递，可以此来判断是否在监控列表内的一个标准
    if(!isNoReadSub && _this.parentPathList.indexOf(path.normalize(path.dirname(watchPath))) > -1||
    	_this.watchPathList[watchPath]){
        _log('added',watchPath);
    	return;
    }
    /*文件不存在时不进行处理（这种情况会很少出现）*/
    if(!fs.existsSync(watchPath)){
        _log('noExists',watchPath);
    	return;
    }
    var inotify_watcher = new inotify(watchPath,function(eventName,data){
    	var fullname = data.fullname;
        // 外层过滤 
        if(!_this._filter(fullname)){
            return false;
        }
        // 触发删除时把相关内存和数据清除
    	if(INOTIFY_CONST.EVENT_REMOVE == eventName){
    		_this._removeWatch(fullname);
    	}else{
    		if(INOTIFY_CONST.EVENT_CREATE == eventName && data.isDir){
    			_this._addWatch(fullname);// 创建文件夹时添加到监控列表
    		}
    	}
    	_this._emit(eventName,data);
    });
    inotify_watcher.isParent = isParent;
    _log('addWatch',watchPath);
    _this.watchPathList[watchPath] = inotify_watcher;

    if(!isNoReadSub){
        _this._readDir(watchPath,false);
    }
	return this;
}
Watcher.prototype._emit = function (eventName,data) {
	var filter = this.options.filter;
	var fullname = data.fullname;
    // 外层过滤 
    if(!this._filter(fullname)){
        return false;
    }
    // 查看是否为监控的文件（夹）或子文件（夹）
    var isInWatching = false;
    for(var i in this.watchPathList){
        if(fullname.indexOf(i) == 0 && !this.watchPathList[i].isParent){
            isInWatching = true;
            break;
        }
    }
    if(!isInWatching){
        return;
    }
    // // 计算出的父级其它不在监控内的文件（夹）触发
    // var dirname = path.normalize(path.dirname(fullname));
    // if(dirname == '.' || this.parentPathList.indexOf(dirname) > -1){
    //      console.log('!parentPathList');
    // 	return;
    // }
	_log('emit',eventName,JSON.stringify(data));
	this.emit(eventName,data);
}
/*删除指定路径的监控*/
Watcher.prototype._removeWatch = function(watchPath){
    watchPath = path.normalize(path.join(watchPath, '.'));
    if(!this.watchPathList[watchPath]){
        return;
    }
    var _this = this;
    delete _this.watchPathList[watchPath];
    // var _removeWatch = function(_path){
    //     if(!_path){
    //         return;
    //     }
    //     _path = path.normalize(path.join(_path, '.'));
    //     var _watch = watchPathList[_path];
    //     inotify.removeWatch(_watch);
    //     delete watchPathList[_watch];
    //     delete watchPathList[_path];
    //     _this.watchFilter.removeFilter(_path);
    //     _log('removeWatch',_path);
    // }
    // var subPath = watcherTree.deletePath(watchPath);//添加到观测树中
    // var _dele = function(basePath,node){
    //     for(var i in node){
    //         var _p = path.join(basePath,i);
    //         _removeWatch(_p);
    //         _dele(_p,node[i]);
    //     }
    // }
    // _removeWatch(watchPath);
    // _dele(watchPath,subPath); 
}

/*初始化计算出的父级目录,不过滤，不遍历子目录*/
Watcher.prototype.initAddParentWatch = function(watchPath,subPath){
    var _this = this;
    watchPath = path.normalize(watchPath);
    _this.parentPathList.push(watchPath);
    _this._addWatch(watchPath,true,true);
    if(subPath){
        //把要监控的子目录优先添加
        if(!misc.isArray(subPath)){
            subPath = [subPath];
        }
        subPath.forEach(function(v){
            _this.initAddWatch(v);
        });
    }
}
/*初始化时添加目录监控(配置文件里的watcher),不过滤，遍历子目录*/
Watcher.prototype.initAddWatch = function(watchPath){
    this._addWatch(watchPath,true);
    this._readDir(watchPath,true);
}
module.exports = Watcher;