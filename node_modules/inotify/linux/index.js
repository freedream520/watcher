var Inotify = require('inotify').Inotify;
var CONST = require('../CONST');
/*得到软链接的真实地址*/
var getRealPathOfLink = function(srcPath,targetPath){
    return path.resolve(path.join(watcherUtil.trim(srcPath),'../'),watcherUtil.trim(targetPath));
}
var getTargetpathOfLink = function(linkPath,callback){
    watcherUtil.command("ls -l "+linkPath+"|awk -F '->' '{print $2}'",function(err,data){
        callback || (callback = function(){});
        if(err){
            callback(err);
        }else{
            callback(null,util.getRealPathOfLink(linkPath,data));
        }
    });
}
var inotify = function(_path,fn_event){
	var dir = {
	    path:_path,
	    watch_for:Inotify.IN_ALL_EVENTS,
	    callback: function(event){
	    	var mask = event.mask;
            var watch = event.watch;
            var watchPath = watchPathList[watch];
            var fileName = event.name;
            if(fileName){
                var fullname = path.normalize(path.join(watchPath, fileName));
                //保证非监控，不触发回调（尤其是监控目录的父级目录）
                if(!watcher.watchFilter.isWatching(fullname)){
                    return;
                }
            }
            var type,isDir = false;
            /*新建文件时，先触发创建再触发修改*/
            //rsync把传上来的文件放入临时文件里，然后再重命名
            //cms里定时任务生成的文件，只触发了IN_OPEN和IN_CLOSE_WRITE
            if(mask & Inotify.IN_MODIFY || mask & Inotify.IN_MOVED_TO || mask & Inotify.IN_CLOSE_WRITE /*|| mask & Inotify.IN_CLOSE_NOWRITE*/){                
                type = CONST.EVENT_CREATE;
                //当文件夹有修改时处理
                if(mask & Inotify.IN_ISDIR){
                    isDir = true;
                }
            }else if(mask & Inotify.IN_CREATE){
            	type = CONST.EVENT_CREATE;
                if (mask & Inotify.IN_ISDIR){
                	isDir = true;
                }else{
                    if(fs.statSync(fullname).isSymbolicLink()){                        
                        return getTargetpathOfLink(fullname,function(err,targetPath){
                            var stat = fs.statSync(targetPath);
                            if(stat.isDirectory()){
                                watcher.addWatch(targetPath);
                                fn_event(CONST.EVENT_CREATE,{
                                	isSymbolicLink: true,
                                	fullname: targetPath,
                                	filename: fileName,
                                	isDir: true
                                });
                            }else if(stat.isFile()){
                            	fn_event(CONST.EVENT_CREATE,{
                            		isSymbolicLink: true,
                                	fullname: targetPath,
                                	filename: fileName,
                            	});
                            }else{//暂时不考虑软链接再是软链接
                                // _log('createOtherFile',fullname,targetPath);
                            }
                        })
                    }
                }
            }else if(mask & Inotify.IN_DELETE || mask & Inotify.IN_MOVED_FROM || mask & Inotify.IN_DELETE_SELF){
                type = CONST.EVENT_REMOVE;
                if (mask & Inotify.IN_ISDIR){
                    isDir = true;
                }
            }
            
            if(type){
            	fn_event(type,{
                	fullname: fullname,
                	filename: fileName,
                	isDir: isDir
            	});
            }
	    }
	};
	var watch = new Inotify();
	watch.addWatch(dir);
	this.watch = watch;
	this.watchPath = _path;
}
inotify.prototype.remove = function(){
	this.watch.removeWatch(this.watchPath);
}

exports.inotify = inotify;